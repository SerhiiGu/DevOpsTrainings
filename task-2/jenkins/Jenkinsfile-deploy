pipeline {
    agent any

    parameters {
        string(name: 'TLS_DOMAIN', defaultValue: 'flask.local', description: 'Domain name for TLS certificate')
    }

    environment {
      DOCKERHUB_CREDS = credentials('DockerHub_User_Pass')
      MANAGER_HOST = "192.168.1.188"
      FLASK_IMAGE = 'flask-app:latest'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Push Flask App') {
            steps {
                dir('task-2/flask-app') {                    
                    sshagent (credentials: ['swarm-manager-ssh-key']) {
                        script {
                            def BUILD_PATH = "/root/build/task-2/flask-app"

                            sh """
                                ssh -o StrictHostKeyChecking=no root@${MANAGER_HOST} '
                                    mkdir -p ${BUILD_PATH} && rm -rf ${BUILD_PATH}/*'
                            """

                            echo "📦 SCP files to Swarm Manager"
                            sh """
                                scp -r -o StrictHostKeyChecking=no . root@${MANAGER_HOST}:${BUILD_PATH}/
                            """

                            echo "🛠️  Build & Push Docker Image"
                            sh """
                                ssh -o StrictHostKeyChecking=no root@${MANAGER_HOST} '
                                    echo ${DOCKERHUB_CREDS_PSW} | docker login -u ${DOCKERHUB_CREDS_USR} --password-stdin &&
                                    docker build -t ${DOCKERHUB_CREDS_USR}/${FLASK_IMAGE} ${BUILD_PATH} &&
                                    docker push ${DOCKERHUB_CREDS_USR}/${FLASK_IMAGE}'
                            """
                        }
                    }
                }
            }
        }

        stage('Generate TLS cert for flask.local if not exist') {
            steps {
                dir('task-2/flask-app') {
                    sshagent (credentials: ['swarm-manager-ssh-key']) {
                        sh '''
                            ssh -o StrictHostKeyChecking=no root@${MANAGER_HOST} '
                                DOMAIN="${TLS_DOMAIN}"
                                CERT_DIR="/etc/certs"
                                CERT_FILE="${CERT_DIR}/selfsigned.crt"
                                KEY_FILE="${CERT_DIR}/selfsigned.key"

                                mkdir -p ${CERT_DIR}

                                if [[ -f "${CERT_FILE}" && -f "${KEY_FILE}" ]]; then
                                    echo "🔐 TLS certificate for ${DOMAIN} already exists, skipping generation."
                                else
                                    echo "📜 Generating self-signed certificate for ${DOMAIN}..."
                                    openssl req -x509 -newkey rsa:4096 -nodes -days 365 \
                                        -keyout /etc/certs/selfsigned.key \
                                        -out /etc/certs/selfsigned.crt \
                                        -subj "/CN=flask.local"
                                fi

                                if grep -q "${DOMAIN}" /etc/hosts; then
                                    echo "✔️  Domain ${DOMAIN} already exists in /etc/hosts"
                                else
                                    echo "📝 Adding ${DOMAIN} to /etc/hosts"
                                    echo "127.0.0.1 ${DOMAIN}" >> /etc/hosts
                                fi
                            '
                        '''
                    }
                }
            }
        }

        stage('Create Docker network if not exists') {
            steps {
                sshagent (credentials: ['swarm-manager-ssh-key']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no root@${MANAGER_HOST} '
                            docker network inspect traefik-net >/dev/null 2>&1 && \
                            echo "Network already exists" || \
                            (docker network create --driver=overlay --scope=swarm traefik-net && echo "Network created")'
                    '''
                }
            }
        }

        stage('Deploy Stack') {
            steps {
                dir('task-2/flask-app') {
                    sshagent (credentials: ['swarm-manager-ssh-key']) {
                        sh """
                            scp -o StrictHostKeyChecking=no docker-compose.yml root@${MANAGER_HOST}:/root/
                            ssh -o StrictHostKeyChecking=no root@${MANAGER_HOST} '
                                docker stack deploy -c docker-compose.yml task2_flask'
                        """
                    }
                }
            }
        }
    }
}
