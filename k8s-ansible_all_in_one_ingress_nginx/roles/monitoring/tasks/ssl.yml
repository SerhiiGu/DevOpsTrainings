- name: Create directory for certs
  file:
    path: /etc/ssl/k3s
    state: directory
    mode: '0755'
  delegate_to: localhost

- name: Check if certificate files exist
  stat:
    path: "/etc/ssl/k3s/{{ item.domain }}.crt"
  loop: "{{ traefik_ssl_domains }}"
  loop_control:
    label: "{{ item.domain }}"
  register: cert_stat
  delegate_to: localhost

- name: Check if key files exist
  stat:
    path: "/etc/ssl/k3s/{{ item.domain }}.key"
  loop: "{{ traefik_ssl_domains }}"
  loop_control:
    label: "{{ item.domain }}"
  register: key_stat
  delegate_to: localhost

- name: Get certificate modulus hash
  shell: |
    openssl x509 -noout -modulus -in /etc/ssl/k3s/{{ item.domain }}.crt | openssl sha256
  loop: "{{ traefik_ssl_domains }}"
  loop_control:
    label: "{{ item.domain }}"
  when: cert_stat.results[loop.index0].stat.exists
  register: cert_modulus
  changed_when: false
  ignore_errors: true
  delegate_to: localhost

- name: Get key modulus hash
  shell: |
    openssl rsa -noout -modulus -in /etc/ssl/k3s/{{ item.domain }}.key | openssl sha256
  loop: "{{ traefik_ssl_domains }}"
  loop_control:
    label: "{{ item.domain }}"
  when: key_stat.results[loop.index0].stat.exists
  register: key_modulus
  changed_when: false
  ignore_errors: true
  delegate_to: localhost

- name: Combine domain info with cert/key/modulus stats
  set_fact:
    ssl_cert_info: "{{ ssl_cert_info | default([]) + [ {
      'item': item.0,
      'cert': item.1.stat,
      'key': item.2.stat,
      'cert_modulus': item.3.stdout | default(''),
      'key_modulus': item.4.stdout | default('')
    } ] }}"
  with_together:
    - "{{ traefik_ssl_domains }}"
    - "{{ cert_stat.results }}"
    - "{{ key_stat.results }}"
    - "{{ cert_modulus.results | default([]) }}"
    - "{{ key_modulus.results | default([]) }}"
  delegate_to: localhost

- name: Generate new self-signed cert and key if missing or invalid
  command: >
    openssl req -x509 -newkey rsa:4096 -nodes
    -keyout /etc/ssl/k3s/{{ item.item.domain }}.key
    -out /etc/ssl/k3s/{{ item.item.domain }}.crt
    -days 365
    -subj "/CN={{ item.item.domain }}"
    -addext "subjectAltName=DNS:{{ item.item.domain }}"
  when: >
    not item.cert.exists
    or not item.key.exists
    or item.cert_modulus != item.key_modulus
  loop: "{{ ssl_cert_info }}"
  loop_control:
    label: "{{ item.item.domain }}"
  delegate_to: localhost

- name: Create TLS secrets in Kubernetes
  kubernetes.core.k8s:
    state: present
    namespace: "{{ item.namespace }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.name }}-tls"
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ lookup('file', '/etc/ssl/k3s/' + item.domain + '.crt') | b64encode }}"
        tls.key: "{{ lookup('file', '/etc/ssl/k3s/' + item.domain + '.key') | b64encode }}"
  loop: "{{ traefik_ssl_domains }}"


- name: Create redirect middleware
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: redirect-https
        namespace: "{{ item.namespace }}"
      spec:
        redirectScheme:
          scheme: https
          permanent: true
  loop: "{{ traefik_ssl_domains }}"
  loop_control:
    label: "Create redirect middleware for namespace {{ item.namespace }}"

