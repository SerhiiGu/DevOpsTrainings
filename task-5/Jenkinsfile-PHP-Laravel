pipeline {
    agent any

    parameters {
        string(name: 'SWARM_MANAGER_IP', defaultValue: '192.168.1.188', description: 'Swarm Manager IP')
    }

    environment {
        DOCKERHUB_CREDS = credentials('DockerHub_User_Pass')
        TLS_DOMAIN = 'laravel.local'
        APP_DIR = 'task-5/laravel'
        IMAGE = 'task-5_laravel:latest'
    }

    stages {
/*
        stage('Puppet Configuration') {
            steps {
                sshagent (credentials: ['swarm-manager-ssh-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no root@${params.SWARM_MANAGER_IP} 'puppet agent --test || [ \$? -eq 2 ]'
                    """
                }
            }
        }

        stage('Generate TLS cert for domain if not exist') {
            steps {
                echo "Generate TLS cert for ${TLS_DOMAIN} if not exist"
                sshagent (credentials: ['swarm-manager-ssh-key']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no root@${SWARM_MANAGER_IP} '
                            CERT_DIR="/etc/certs"
                            CERT_FILE="${CERT_DIR}/selfsigned.crt"
                            KEY_FILE="${CERT_DIR}/selfsigned.key"
                            mkdir -p ${CERT_DIR}

                            if [[ -f "${CERT_FILE}" && -f "${KEY_FILE}" ]]; then
                                echo 'üîê TLS certificate for ${TLS_DOMAIN} already exists, skipping generation.'
                            else
                                echo 'üìú Generating self-signed certificate for ${TLS_DOMAIN}...'
                                openssl req -x509 -newkey rsa:4096 -nodes -days 365 \
                                    -keyout /etc/certs/selfsigned.key \
                                    -out /etc/certs/selfsigned.crt \
                                    -subj '/CN=${TLS_DOMAIN}'
                            fi

                            if grep -q '${TLS_DOMAIN}' /etc/hosts; then
                                echo '‚úîÔ∏è  Domain ${TLS_DOMAIN} already exists in /etc/hosts'
                            else
                                echo 'üìù Adding ${TLS_DOMAIN} to /etc/hosts'
                                echo '127.0.0.1 ${TLS_DOMAIN}' >> /etc/hosts
                            fi
                        '
                    '''
                }
            }
        }

        stage('Create Docker network @laravel-public@ if not exists') {
            steps {
                sshagent (credentials: ['swarm-manager-ssh-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no root@${params.SWARM_MANAGER_IP} '
                            docker network inspect laravel-public >/dev/null 2>&1 && \
                            echo "Network @laravel-public@ already exists" || \
                            (docker network create --driver=overlay --scope=swarm --attachable laravel-public && echo "Network @laravel-public@ created")'
                    """
                }
            }
        }

        stage('Create Docker network @monitoring@ if not exists') {
            steps {
                sshagent (credentials: ['swarm-manager-ssh-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no root@${params.SWARM_MANAGER_IP} '
                            docker network inspect monitoring >/dev/null 2>&1 && \
                            echo "Network @monitoring@ already exists" || \
                            (docker network create --driver=overlay --scope=swarm --attachable monitoring && echo "Network @monitoring@ created")'
                    """
                }
            }
        }
*/
        stage('Build & Push Docker Image') {
            steps {
                dir("${APP_DIR}") {
                    sshagent (credentials: ['swarm-manager-ssh-key']) {
                        script {
                            def BUILD_PATH = "/root/build/${APP_DIR}"
                            sh """
                                ssh -o StrictHostKeyChecking=no root@${params.SWARM_MANAGER_IP} '
                                    mkdir -p ${BUILD_PATH} && rm -rf ${BUILD_PATH}/../* && mkdir -p ${BUILD_PATH}'
                            """

                            echo "üì¶ SCP files to Swarm Manager"
                            sh """
                                scp -r -o StrictHostKeyChecking=no ../. root@${params.SWARM_MANAGER_IP}:${BUILD_PATH}/../
                                ssh -o StrictHostKeyChecking=no root@${params.SWARM_MANAGER_IP} '
                                    cp -r ${BUILD_PATH}/../laravel-apps/* ${BUILD_PATH} &&
                                    cp ${BUILD_PATH}/../laravel-apps/.dockerignore ${BUILD_PATH} &&
                                    pwd && ls -la   '
                            """

                            echo "üõ†Ô∏è  Build & Push Docker Image"
                            sh """
                                ssh -o StrictHostKeyChecking=no root@${params.SWARM_MANAGER_IP} '
                                    echo "${DOCKERHUB_CREDS_PSW}" | docker login -u "${DOCKERHUB_CREDS_USR}" --password-stdin &&
                                    cd ${BUILD_PATH} && 
                                    docker build -t ${DOCKERHUB_CREDS_USR}/${IMAGE} . &&
                                    docker push ${DOCKERHUB_CREDS_USR}/${IMAGE}
                                '
                            """

                        }
                    }
                }
            }
        }

        stage('Deploy with Docker Stack') {
            steps {
                dir("${APP_DIR}") {
                    sh """
                        ssh -o StrictHostKeyChecking=no root@${params.SWARM_MANAGER_IP} '
                            cd /root/build/${APP_DIR} &&
                            docker pull ${DOCKERHUB_CREDS_USR}/${IMAGE} &&
                            docker stack deploy -c swarm-deploy.yml task5-laravel
                        '
                    """
                }
            }
        }

      
    }
}
