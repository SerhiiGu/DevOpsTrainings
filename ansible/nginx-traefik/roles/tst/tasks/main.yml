---

- name: Copy Docker stack file
  copy:
    src: docker-compose.prod.yml
    dest: "/home/{{ deploy_user }}/stack/docker-compose.yml"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: Copy Traefik static config file
  copy:
    src: ./config/traefik.yml
    dest: "/home/{{ deploy_user }}/stack/config/traefik.yml"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: Copy Traefik dynamic config
  copy:
    src: ./config/dynamic.yml
    dest: "/home/{{ deploy_user }}/stack/config/dynamic.yml"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: Copy self-signed certificate
  copy:
    src: ../../../certs/cert.pem
    dest: "/home/{{ deploy_user }}/stack/certs/cert.pem"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: Copy self-signed key
  copy:
    src: ../../../certs/key.pem
    dest: "/home/{{ deploy_user }}/stack/certs/key.pem"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: Remove logs directory and all its contents
  file:
    path: "/home/{{ deploy_user }}/stack/logs"
    state: absent

- name: Create Traefik logs directory
  file:
    path: "/home/{{ deploy_user }}/stack/logs"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: Create external overlay network 'frontend'
  docker_network:
    name: frontend
    driver: overlay
    scope: swarm
    attachable: yes
    state: present

- name: Deploy stack only if this node is a Swarm manager
  command: docker stack deploy -c /home/{{ deploy_user }}/stack/docker-compose.yml tst

- name: Wait for Nginx to be running
  shell: docker service ls --filter name=tst_nginx --format "{{'{{.Replicas}}'}}"
  register: nginx_replicas
  retries: 10
  delay: 5
  until: nginx_replicas.stdout is match("^[1-9]+/[1-9]+$")

- debug:
    msg: >-
      Nginx service replicas: {{
        nginx_replicas.stdout if (nginx_replicas is defined and 'stdout' in nginx_replicas) else 'N/A'
      }}

- name: Wait for Traefik to be running
  shell: docker service ls --filter name=tst_traefik --format "{{'{{.Replicas}}'}}"
  register: traefik_replicas
  retries: 10
  delay: 5
  until: traefik_replicas.stdout is match("^[1-9]+/[1-9]+$")

- debug:
    msg: >-
      Traefik service replicas: {{
        traefik_replicas.stdout if (traefik_replicas is defined and 'stdout' in traefik_replicas) else 'N/A'
      }}


